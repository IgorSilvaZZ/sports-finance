// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Responsible {
  id          String    @id @default(uuid())
  name        String
  email       String
  password    String
  phoneNumber String?
  avatar      String?
  createDate  DateTime? @default(now())
  updateDate  DateTime? @default(now())

  Category Category[]
  Event    Event[]
}

model Participant {
  id          String    @id @default(uuid())
  name        String
  email       String?
  phoneNumber String?
  avatar      String?
  eventId     String
  status      Boolean?  @default(true)
  event       Event     @relation(fields: [eventId], references: [id])
  createDate  DateTime? @default(now())
  updateDate  DateTime? @default(now())

  History History[]
}

model Category {
  id            String    @id @default(uuid())
  name          String
  description   String
  responsibleId String
  createDate    DateTime? @default(now())
  updateDate    DateTime? @default(now())

  responsible Responsible @relation(fields: [responsibleId], references: [id])
}

model Event {
  id            String    @id @default(uuid())
  name          String
  description   String
  type          String
  valueMonthly  Float
  dayMonthly    String
  responsibleId String
  createDate    DateTime? @default(now())
  updateDate    DateTime? @default(now())

  responsible Responsible @relation(fields: [responsibleId], references: [id])

  Participant Participant[]
  History     History[]
  Payments    Payments[]
}

model History {
  id            String      @id @default(uuid())
  name          String
  value         Decimal
  type          String
  participantId String
  status        Boolean
  eventId       String
  event         Event       @relation(fields: [eventId], references: [id])
  participant   Participant @relation(fields: [participantId], references: [id])
  createDate    DateTime?   @default(now())
  updateDate    DateTime?   @default(now())
}

model Payments {
  id          String    @id @default(uuid())
  name        String
  value       Decimal
  eventId     String
  status      Boolean
  datePayment DateTime
  paymentRef  String // yyyy-mm (2024-10) (Ano e MÃªs de referencia)
  event       Event     @relation(fields: [eventId], references: [id])
  createDate  DateTime? @default(now())
  updateDate  DateTime? @default(now())
}
